// This file is generated by rust-protobuf 2.1.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ArchivePayload {
    // message oneof groups
    pub Sum: ::std::option::Option<ArchivePayload_oneof_Sum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum ArchivePayload_oneof_Sum {
    daml_lf_1(super::daml_lf_1::Package),
}

impl ArchivePayload {
    pub fn new() -> ArchivePayload {
        ::std::default::Default::default()
    }

    // .daml_lf_1.Package daml_lf_1 = 2;

    pub fn clear_daml_lf_1(&mut self) {
        self.Sum = ::std::option::Option::None;
    }

    pub fn has_daml_lf_1(&self) -> bool {
        match self.Sum {
            ::std::option::Option::Some(ArchivePayload_oneof_Sum::daml_lf_1(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_daml_lf_1(&mut self, v: super::daml_lf_1::Package) {
        self.Sum = ::std::option::Option::Some(ArchivePayload_oneof_Sum::daml_lf_1(v))
    }

    // Mutable pointer to the field.
    pub fn mut_daml_lf_1(&mut self) -> &mut super::daml_lf_1::Package {
        if let ::std::option::Option::Some(ArchivePayload_oneof_Sum::daml_lf_1(_)) = self.Sum {
        } else {
            self.Sum = ::std::option::Option::Some(ArchivePayload_oneof_Sum::daml_lf_1(super::daml_lf_1::Package::new()));
        }
        match self.Sum {
            ::std::option::Option::Some(ArchivePayload_oneof_Sum::daml_lf_1(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_daml_lf_1(&mut self) -> super::daml_lf_1::Package {
        if self.has_daml_lf_1() {
            match self.Sum.take() {
                ::std::option::Option::Some(ArchivePayload_oneof_Sum::daml_lf_1(v)) => v,
                _ => panic!(),
            }
        } else {
            super::daml_lf_1::Package::new()
        }
    }

    pub fn get_daml_lf_1(&self) -> &super::daml_lf_1::Package {
        match self.Sum {
            ::std::option::Option::Some(ArchivePayload_oneof_Sum::daml_lf_1(ref v)) => v,
            _ => super::daml_lf_1::Package::default_instance(),
        }
    }
}

impl ::protobuf::Message for ArchivePayload {
    fn is_initialized(&self) -> bool {
        if let Some(ArchivePayload_oneof_Sum::daml_lf_1(ref v)) = self.Sum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Sum = ::std::option::Option::Some(ArchivePayload_oneof_Sum::daml_lf_1(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.Sum {
            match v {
                &ArchivePayload_oneof_Sum::daml_lf_1(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.Sum {
            match v {
                &ArchivePayload_oneof_Sum::daml_lf_1(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ArchivePayload {
        ArchivePayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::daml_lf_1::Package>(
                    "daml_lf_1",
                    ArchivePayload::has_daml_lf_1,
                    ArchivePayload::get_daml_lf_1,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ArchivePayload>(
                    "ArchivePayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ArchivePayload {
        static mut instance: ::protobuf::lazy::Lazy<ArchivePayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ArchivePayload,
        };
        unsafe {
            instance.get(ArchivePayload::new)
        }
    }
}

impl ::protobuf::Clear for ArchivePayload {
    fn clear(&mut self) {
        self.clear_daml_lf_1();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ArchivePayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArchivePayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Archive {
    // message fields
    pub hash_function: HashFunction,
    pub payload: ::std::vec::Vec<u8>,
    pub hash: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Archive {
    pub fn new() -> Archive {
        ::std::default::Default::default()
    }

    // .daml_lf.HashFunction hash_function = 1;

    pub fn clear_hash_function(&mut self) {
        self.hash_function = HashFunction::SHA256;
    }

    // Param is passed by value, moved
    pub fn set_hash_function(&mut self, v: HashFunction) {
        self.hash_function = v;
    }

    pub fn get_hash_function(&self) -> HashFunction {
        self.hash_function
    }

    // bytes payload = 3;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }

    // string hash = 4;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    pub fn get_hash(&self) -> &str {
        &self.hash
    }
}

impl ::protobuf::Message for Archive {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.hash_function, 1, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.hash_function != HashFunction::SHA256 {
            my_size += ::protobuf::rt::enum_size(1, self.hash_function);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.payload);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.hash_function != HashFunction::SHA256 {
            os.write_enum(1, self.hash_function.value())?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(3, &self.payload)?;
        }
        if !self.hash.is_empty() {
            os.write_string(4, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Archive {
        Archive::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HashFunction>>(
                    "hash_function",
                    |m: &Archive| { &m.hash_function },
                    |m: &mut Archive| { &mut m.hash_function },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &Archive| { &m.payload },
                    |m: &mut Archive| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hash",
                    |m: &Archive| { &m.hash },
                    |m: &mut Archive| { &mut m.hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Archive>(
                    "Archive",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Archive {
        static mut instance: ::protobuf::lazy::Lazy<Archive> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Archive,
        };
        unsafe {
            instance.get(Archive::new)
        }
    }
}

impl ::protobuf::Clear for Archive {
    fn clear(&mut self) {
        self.clear_hash_function();
        self.clear_payload();
        self.clear_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Archive {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Archive {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HashFunction {
    SHA256 = 0,
}

impl ::protobuf::ProtobufEnum for HashFunction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HashFunction> {
        match value {
            0 => ::std::option::Option::Some(HashFunction::SHA256),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HashFunction] = &[
            HashFunction::SHA256,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("HashFunction", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for HashFunction {
}

impl ::std::default::Default for HashFunction {
    fn default() -> Self {
        HashFunction::SHA256
    }
}

impl ::protobuf::reflect::ProtobufValue for HashFunction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rdaml_lf.proto\x12\x07daml_lf\x1a\x0fdaml_lf_1.proto\"I\n\x0eArchiveP\
    ayload\x120\n\tdaml_lf_1\x18\x02\x20\x01(\x0b2\x12.daml_lf_1.PackageH\0R\
    \x07damlLf1B\x05\n\x03Sum\"s\n\x07Archive\x12:\n\rhash_function\x18\x01\
    \x20\x01(\x0e2\x15.daml_lf.HashFunctionR\x0chashFunction\x12\x18\n\x07pa\
    yload\x18\x03\x20\x01(\x0cR\x07payload\x12\x12\n\x04hash\x18\x04\x20\x01\
    (\tR\x04hash*\x1a\n\x0cHashFunction\x12\n\n\x06SHA256\x10\0B\x1a\n\x18co\
    m.digitalasset.daml_lfb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
