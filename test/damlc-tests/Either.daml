-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2

daml 1.2
module Either where

import DA.Either
import DA.Assert

testLefts = scenario do
  ["a", "b", "c"] === lefts [Right 1, Left "a", Left "b", Right 2, Left "c"]
  [] === lefts ([] : [Either Int Text])
  [] === lefts ([Right 1] : [Either Bool Int])

testRights = scenario do
  [1, 2] === rights [Right 1, Left "a", Left "b", Right 2, Left "c"]
  [] === rights ([] : [Either Int Text])
  [] === rights ([Left False] : [Either Bool Int])

testPartitionEithers = scenario do
  (["a", "b", "c"], [1, 2]) === partitionEithers [Right 1, Left "a", Left "b", Right 2, Left "c"]
  ([], []) === partitionEithers ([] : [Either Int Text])
  ([], [False, False]) === partitionEithers ([Right False, Right False] : [Either Int Bool])
  ([1], []) === partitionEithers ([Left 1] : [Either Int Bool])

testIsLeft = scenario do
  True === isLeft (Left 1 : Either Int Int)
  False === isLeft (Right 1 : Either Int Int)

testIsRight = scenario do
  False === isRight (Left 1 : Either Int Int)
  True === isRight (Right 1 : Either Int Int)

testFromLeft = scenario do
  2 === fromLeft 1 (Left 2)
  1 === fromLeft 1 (Right "a")

testFromRight = scenario do
  "b" === fromRight "b" (Left 2)
  "a" === fromRight "b" (Right "a")

testOptionalToEither = scenario do
  Right 1 === optionalToEither "a" (Some 1)
  Left "a" === optionalToEither "a" (None : Optional Int)

testEitherToOptional = scenario do
  Some 1 === eitherToOptional (Right 1)
  None === eitherToOptional ((Left "a") : Either Text Int)
