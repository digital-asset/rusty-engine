-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
daml 1.2
module Iou where

template IouProposal with
    iou : Iou
  where
    signatory iou.issuer
    observer iou.owner

    choice Accept : ContractId Iou
      controller iou.owner
      do
        create iou

template Iou
  with
    issuer : Party
    owner : Party
    currency : Text
    amount : Int
  where
    signatory issuer
    ensure amount > 0

    agreement show issuer <> " promises to pay " <>
              show amount <> " " <> currency <>
              " on demand to " <> show owner

    let updateOwner : Party -> Update (ContractId Iou)
        updateAmount : Int -> Update (ContractId Iou)
        updateOwner o = create this with owner  = o
        updateAmount a = create this with amount = a

    controller owner can
      nonconsuming DoNothing : () -- DEL-6496
        do
          return ()

      Transfer : ContractId Iou
        with newOwner : Party
        do
          updateOwner newOwner

      Split : (ContractId Iou, ContractId Iou)
        with splitAmount : Int
        do
          -- Split the IOU by dividing the amount.
          let restAmount = amount - splitAmount
          splitCid <- updateAmount splitAmount
          restCid  <- updateAmount restAmount
          return (splitCid, restCid)

      Merge : ContractId Iou
        with otherCid : ContractId Iou
        do
          -- Merge two IOUs by aggregating their amounts.
          otherIou <- fetch otherCid
          -- Check the two IOU's are compatible
          assert $ this == otherIou with amount
          -- Retire the old Iou by transferring to the
          -- issuer and archiving
          transferCid <-
            exercise otherCid Transfer with newOwner = issuer
          archive transferCid
          -- Return the merged Iou
          updateAmount (amount + otherIou.amount)

test = scenario do
    bank <- getParty "Bank"
    alice <- getParty "Alice"
    let iou = Iou with
            issuer = bank
            owner = alice
            currency = "CHF"
            amount = 100
    propId <- submit bank do create IouProposal with iou
    iouId <- submit alice do exercise propId Accept
    (iouId1, iouId2) <- submit alice do exercise iouId Split with splitAmount = 80
    iou1 <- submit alice do fetch iouId1
    iou2 <- submit alice do fetch iouId2
    assert $ iou1 == iou with amount = 80
    assert $ iou2 == iou with amount = 20

    submitMustFail bank do create iou with amount = 0

    pure $ iou1.amount + iou2.amount
